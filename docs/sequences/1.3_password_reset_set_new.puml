@startuml

title 1.3 [P1] Password Reset - (2) 토큰 검증 및 새 비밀번호 설정

actor "User (Client)" as User
participant "MemberPasswordController" as Controller
participant "PasswordResetService" as AppService
participant "PasswordResetTokenProvider" as TokenProvider
participant "MemberQueryRepository" as QueryRepo
participant "Member" as MemberDomain
participant "MemberCommandRepository" as CommandRepo
participant "PasswordEncoder" as Encoder

== Phase 1: 토큰 검증 ==

User -> Controller: GET /api/v1/members/reset-password?token=xxx
activate Controller

Controller -> AppService: verifyResetToken(token)
activate AppService

AppService -> TokenProvider: validateResetToken(token)
activate TokenProvider
alt Invalid or Expired Token
    TokenProvider --> AppService: false
    deactivate TokenProvider
    AppService --> Controller: DomainException (INVALID_PASSWORD_RESET_TOKEN)
    deactivate AppService
    Controller --> User: 400 Bad Request\n{tokenValid: false, ...}
    deactivate Controller
else Valid Token
    TokenProvider --> AppService: true
    deactivate TokenProvider

    AppService -> TokenProvider: getEmailFromResetToken(token)
    activate TokenProvider
    TokenProvider --> AppService: email
    deactivate TokenProvider

    AppService -> QueryRepo: findByEmail(email)
    activate QueryRepo
    QueryRepo --> AppService: Optional<Member>
    deactivate QueryRepo

    AppService --> Controller: TokenVerificationResponse\n{tokenValid: true, userEmail: ..., ...}
    deactivate AppService

    Controller --> User: 200 OK\n{tokenValid: true, ...}
    deactivate Controller
end

== Phase 2: 새 비밀번호 설정 ==

User -> Controller: POST /api/v1/members/confirm-reset-password\n{token: "xxx", newPassword: "..."}
activate Controller

Controller -> AppService: confirmReset(request)
activate AppService

AppService -> TokenProvider: validateResetToken(token)
activate TokenProvider
TokenProvider --> AppService: true
deactivate TokenProvider

AppService -> TokenProvider: getEmailFromResetToken(token)
activate TokenProvider
TokenProvider --> AppService: email
deactivate TokenProvider

AppService -> QueryRepo: findByEmail(email)
activate QueryRepo
QueryRepo --> AppService: Optional<Member>
deactivate QueryRepo

AppService -> MemberDomain: changeAccountPassword(accountId, newPassword, encoder)
activate MemberDomain
MemberDomain -> Encoder: encode(newPassword)
activate Encoder
Encoder --> MemberDomain: encodedPassword
deactivate Encoder
deactivate MemberDomain

AppService -> CommandRepo: save(member)
activate CommandRepo
deactivate CommandRepo

AppService -> TokenProvider: invalidateAfterUse(token)
activate TokenProvider
note right: 일회용 토큰 삭제
deactivate TokenProvider

AppService --> Controller: ConfirmResetResponse()

deactivate AppService

Controller --> User: 204 No Content
deactivate Controller

@enduml