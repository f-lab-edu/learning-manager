@startuml

title 1.3 [P1] Password Reset - (2) 토큰 검증 및 새 비밀번호 설정 (패스워드 분실 시나리오)

actor "User (Guest)" as User
participant "MemberPasswordController" as Controller
participant "PasswordResetService" as AppService
participant "PasswordResetTokenManager" as TokenManager
participant "HttpSession" as Session
participant "MemberQueryRepository" as QueryRepository
participant "Member" as MemberDomain
participant "MemberCommandRepository" as CommandRepository
participant "PasswordEncoder" as Encoder

== Phase 1: 토큰 검증 및 리다이렉트 ==

User -> Controller: GET /api/v1/members/reset-password?token=xxx
activate Controller

Controller -> AppService: validatePasswordResetToken(token)
activate AppService

AppService -> TokenManager: validateToken(token)
activate TokenManager
alt Invalid or Expired Token
    TokenManager --> AppService: false
    deactivate TokenManager
    AppService --> Controller: DomainException\n(INVALID_PASSWORD_RESET_TOKEN)
    deactivate AppService
    Controller --> User: 302 Redirect\n/error?message=invalid_token
    deactivate Controller
else Valid Token
    TokenManager --> AppService: true
    deactivate TokenManager
    AppService --> Controller: true
    deactivate AppService

    Controller -> Session: setAttribute("verified_reset_token", token)\nsetMaxInactiveInterval(300)
    activate Session
    Session --> Controller: (저장 완료)
    deactivate Session

    Controller --> User: 302 Redirect\n/reset-password-form
    deactivate Controller
end

== Phase 2: 새 비밀번호 설정 ==

User -> Controller: POST /api/v1/members/confirm-reset-password\n{newPassword: "NewPass123!"}
activate Controller

Controller -> Session: getAttribute("verified_reset_token")
activate Session
alt No Session Token
    Session --> Controller: null
    deactivate Session
    Controller --> User: 400 Bad Request\n{code: "DML031", message: "유효하지 않은 비밀번호 재설정 토큰입니다."}
    deactivate Controller
else Valid Session Token
    Session --> Controller: token
    deactivate Session

    Controller -> AppService: confirmReset(token, newPassword)
    activate AppService

    AppService -> TokenManager: getEmailByToken(token)
    activate TokenManager
    TokenManager --> AppService: email
    deactivate TokenManager

    AppService -> QueryRepository: findByEmail(Email)
    activate QueryRepository
    QueryRepository --> AppService: Optional<Member>
    deactivate QueryRepository

    AppService -> MemberDomain: changeAccountPassword(accountId, newPassword, encoder)
    activate MemberDomain
    MemberDomain -> Encoder: encode(newPassword)
    activate Encoder
    Encoder --> MemberDomain: encodedPassword
    deactivate Encoder
    MemberDomain --> AppService: (완료)
    deactivate MemberDomain

    AppService -> TokenManager: removeToken(token)
    activate TokenManager
    note right: 일회용 토큰 삭제
    TokenManager --> AppService: (삭제 완료)
    deactivate TokenManager

    AppService -> CommandRepository: save(member)
    activate CommandRepository
    CommandRepository --> AppService: (저장 완료)
    deactivate CommandRepository

    AppService --> Controller: ConfirmResetResponse()
    deactivate AppService

    Controller -> Session: removeAttribute("verified_reset_token")
    activate Session
    Session --> Controller: (정리 완료)
    deactivate Session

    Controller --> User: 204 No Content
    deactivate Controller
end
@enduml