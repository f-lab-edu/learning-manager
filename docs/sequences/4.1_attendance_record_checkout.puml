@startuml

title 4.1 [P0] Attendance Record - Check-out

actor "User (Member)" as User
participant "AttendanceCheckOutController" as Controller
participant "QRCodeGenerator" as QRGenerator
participant "AttendanceCheckOutService" as AppService
participant "SessionQueryRepository" as SessionQueryRepo
participant "AttendanceQueryRepository" as AttendQueryRepo
participant "Attendance" as AttendanceDomain
participant "AttendanceCommandRepository" as AttendCommandRepo

User -> Controller: POST /api/v1/attendance/check-out/{token}
activate Controller

Controller -> QRGenerator: validateQrCode(token, sessionId)
activate QRGenerator
deactivate QRGenerator

Controller -> AppService: checkOut(request)
activate AppService

note right of AppService
  memberId is from AuthenticationContextHolder
end note

AppService -> SessionQueryRepo: findById(sessionId)
activate SessionQueryRepo
SessionQueryRepo --> AppService: session
deactivate SessionQueryRepo

note right of AppService: Validate member is a participant in the session

AppService -> AttendQueryRepo: findBySessionIdAndMemberId(...)
activate AttendQueryRepo
alt Attendance record not found
    AttendQueryRepo --> AppService: Optional.empty()
    deactivate AttendQueryRepo
    AppService --> Controller: IllegalArgumentException
    deactivate AppService
    Controller --> User: 400 Bad Request
    deactivate Controller
else Attendance record exists
    AttendQueryRepo --> AppService: Optional<Attendance>
    deactivate AttendQueryRepo
end


AppService -> AttendanceDomain: checkOut(clock)
activate AttendanceDomain
deactivate AttendanceDomain

AppService -> AttendCommandRepo: save(attendance)
activate AttendCommandRepo
deactivate AttendCommandRepo

AppService --> Controller: AttendanceCheckOut.Response
deactivate AppService

Controller --> User: 200 OK
deactivate Controller

@enduml
